function loading(b, a) {
    this.canvas = (typeof b == "String" ? document.getElementById(b) : b);
    if (a) {
        this.radius = a.radius || 10;
        this.circleLineWidth = a.circleLineWidth || 4;
        this.circleColor = a.circleColor || "lightgray";
        this.dotColor = a.dotColor || "gray"
    } else {
        this.radius = 10;
        this.circelLineWidth = 4;
        this.circleColor = "lightgray";
        this.dotColor = "gray"
    }
}
loading.prototype = {
    show: function() {
        var d = this.canvas;
        if (!d.getContext) {
            return
        }
        if (d.__loading) {
            return
        }
        d.__loading = this;
        var b = d.getContext("2d");
        var a = this.radius;
        var c = [{
            angle: 0,
            radius: 1.5
        },
        {
            angle: 3 / a,
            radius: 2
        },
        {
            angle: 7 / a,
            radius: 2.5
        },
        {
            angle: 12 / a,
            radius: 3
        }];
        var e = this;
        d.loadingInterval = setInterval(function() {
            b.clearRect(0, 0, d.width, d.height);
            var g = e.circleLineWidth;
            var f = {
                x: d.width / 2 - a,
                y: d.height / 2 - a
            };
            b.beginPath();
            b.lineWidth = g;
            b.strokeStyle = e.circleColor;
            b.arc(f.x, f.y, a, 0, Math.PI * 2);
            b.closePath();
            b.stroke();
            for (var h = 0; h < c.length; h++) {
                var l = c[h].currentAngle || c[h].angle;
                var k = {
                    x: f.x - (a) * Math.cos(l),
                    y: f.y - (a) * Math.sin(l)
                };
                var j = c[h].radius;
                b.beginPath();
                b.fillStyle = e.dotColor;
                b.arc(k.x, k.y, j, 0, Math.PI * 2);
                b.closePath();
                b.fill();
                c[h].currentAngle = l + 4 / a
            }
        },
        50)
    },
    hide: function() {
        var b = this.canvas;
        b.__loading = false;
        if (b.loadingInterval) {
            window.clearInterval(b.loadingInterval)
        }
        var a = b.getContext("2d");
        if (a) {
            a.clearRect(0, 0, b.width, b.height)
        }
    }
}; (function() {
    function b() {
        this.tapTimeLimit = 500
    }
    Array.prototype.each = function(d, f, e) {
        f = f || 0;
        e = e || this.length - 1;
        for (var c = f; c <= e; c++) {
            d(this[c], this, c);
            if (this.breakLoop) {
                this.breakLoop = false;
                break
            }
        }
    };
    b.prototype = {
        preventDefaultEvent: function(c) {
            if (c.preventDefault) {
                c.preventDefault()
            } else {
                c.returnValue = false
            }
        },
        isTouchDevice: function() {
            return !! ("ontouchstart" in window)
        },
        toMoney: function(d, c) {
            return d.toFixed(c ? c: 2)
        },
        bigNumberToText: function(f) {
            var c;
            var e = f / 100000000;
            if (e > 1) {
                c = e.toFixed(2) + "亿"
            } else {
                var d = f / 10000;
                if (d > 1) {
                    c = d.toFixed() + "万"
                } else {
                    c = f
                }
            }
            return c
        },
        getOffset: function(g) {
            if (!isNaN(g.offsetX) && !isNaN(g.offsetY)) {
                return g
            }
            var f = g.target;
            if (f.offsetLeft == undefined) {
                f = f.parentNode
            }
            var d = getPageCoord(f);
            var c = {
                x: window.pageXOffset + g.clientX,
                y: window.pageYOffset + g.clientY
            };
            var h = {
                offsetX: c.x - d.x,
                offsetY: c.y - d.y
            };
            return h
        },
        getPageCoord: function(c) {
            var d = {
                x: 0,
                y: 0
            };
            while (c) {
                d.x += c.offsetLeft;
                d.y += c.offsetTop;
                c = c.offsetParent
            }
            return d
        },
        addLoadEvent: function(d) {
            var c = window.onload;
            if (typeof c != "function") {
                window.onload = d
            } else {
                window.onload = function() {
                    c();
                    d()
                }
            }
        },
        addEvent: function(g, f, d, c) {
            if (g.addEventListener) {
                g.addEventListener(f, d, c);
                return true
            } else {
                if (g.attachEvent) {
                    var e = g.attachEvent("on" + f, d);
                    return e
                } else {
                    g["on" + f] = d
                }
            }
        },
        getEventTarget: function(c) {
            return c.srcElement || c.target || c.relatedTarget
        },
        $id: function(c) {
            return document.getElementById(c)
        }
    };
    window.extendObject = function(e, c) {
        for (var d in e) {
            c[d] = e[d]
        }
    };
    window.extendWindow = function(c) {
        extendObject(c, window)
    };
    var a = new b();
    extendWindow(a);
    window.getQueryParam = function(e, d) {
        var c = new RegExp("[?&]" + e + "=([^&]+)", "i");
        var f = c.exec(d ? window.top.location.search: location.search);
        if (f && f.length > 1) {
            return decodeURIComponent(f[1])
        } else {
            return ""
        }
    };
    window.debug = getQueryParam("debug");
    window.setDebugMsg = function(f) {
        if (window.debug) {
            try {
                var d = "debug";
                var e = $id(d);
                if (!e) {
                    e = document.createElement("DIV");
                    e.id = d;
                    document.body.appendChild(e)
                }
                e.innerHTML = (window.debug == 2 ? (f + "<br/>" + e.innerHTML) : f)
            } catch(c) {
                alert(f + ";error:" + c)
            }
        }
    }
})();
var dashSize = 2;
function Painter(c, a, b) {
    this.canvas = document.getElementById(c);
    if (!this.canvas.getContext) {
        return
    }
    this.ctx = this.canvas.getContext("2d");
    this.data = b;
    this.paintImplement = a;
    this.width = this.canvas.width;
    this.height = this.canvas.height
}
Painter.prototype = {
    paint: function() {
        var d = this.paintImplement;
        var e = this.data;
        var b = this.ctx;
        if (typeof d.initialize == "function") {
            d.initialize(this)
        }
        if (d.start) {
            d.start.call(this)
        }
        if (typeof d.paintItems == "function") {
            d.paintItems.call(this)
        } else {
            var f = ((typeof d.getDataLength == "function") ? d.getDataLength.call(this) : this.data.length);
            for (var c = 0; c < f; c++) {
                var a = d.getX ? d.getX.call(this, c) : undefined;
                var g = d.getY ? d.getY.call(this, c) : undefined;
                d.paintItem.call(this, c, a, g)
            }
        }
        if (d.end) {
            d.end.call(this)
        }
    },
    drawHLine: function(e, f, h, d, b, a) {
        var c = this.ctx;
        c.strokeStyle = e;
        if (h * 10 % 10 == 0) {
            h += 0.5
        }
        if (a && a == "dashed") {
            var g = 0;
            do {
                this.drawHLine(e, g, h, dashSize, 1, "solid");
                g += dashSize * 2
            } while ( g < d )
        } else {
            c.beginPath();
            c.moveTo(f, h);
            c.lineTo(f + d, h);
            c.stroke()
        }
    },
    drawVLine: function(e, f, i, g, c, b) {
        var d = this.ctx;
        d.strokeStyle = e;
        if (f * 10 % 10 == 0) {
            f += 0.5
        }
        if (b && b == "dashed") {
            var a = 0;
            do {
                this.drawVLine(e, f, a, dashSize, 1);
                a += dashSize * 2
            } while ( a < g )
        } else {
            d.beginPath();
            d.moveTo(f, i);
            d.lineTo(f, i + g);
            d.stroke()
        }
    },
    setData: function(a) {
        this.data = a
    },
    setPainterImplement: function(a) {
        this.paintImplement = a
    }
};
var Ajax = {};
Ajax.request = function(g, d, f, e, b) {
    b = b == undefined ? true: b;
    var a = (window.ActiveXObject ? new ActiveXObject("Microsoft.XMLHTTP") : (window.XMLHttpRequest ? new XMLHttpRequest() : false));
    var c = document.getElementById(e);
    if (c && b) {
        c.loadingObj = new loading(c);
        c.loadingObj.show()
    }
    a.onreadystatechange = function() {
        if (a.readyState == 4 && a.status == 200) {
            if (c && b) {
                c.loadingObj.hide()
            }
            f(a)
        }
    };
    a.open(g || "POST", d, true);
    if (a.overrideMimeType) {
        a.overrideMimeType("text/xml")
    }
    a.send()
};
Ajax.get = function(b, d, c, a) {
    Ajax.request("GET", b, d, c, a)
};
Ajax.post = function(b, d, c, a) {
    Ajax.request("POST", b, d, c, a)
};
function crossLines(a) {
    this.updateOptions(a)
}
crossLines.prototype = {
    updateOptions: function(a) {
        this.canvas = a.canvas;
        this.canvasId = this.canvas.id;
        this.horizontalDivId = this.canvasId + "_crossLines_H";
        this.verticalDivId = this.canvasId + "_crossLines_V";
        this.verticalRange = a.verticalRange || {
            y1: 0,
            y2: this.canvas.height
        };
        this.horizontalRange = a.horizontalRange || {
            x1: 0,
            x2: this.canvas.width
        };
        this.canvasPosition = getPageCoord(this.canvas);
        this.crossPoint = a.crossPoint;
        this.color = a.color || "black"
    },
    removeCrossLines: function() {
        var b = this.canvas;
        var f = b.id;
        var e = f + "_crossLines_H";
        var a = f + "_crossLines_V";
        var d = $id(e);
        if (d) {
            d.style.display = "none"
        }
        var c = $id(a);
        if (c) {
            c.style.display = "none"
        }
    },
    getHLine: function() {
        return $id(this.horizontalDivId)
    },
    getVLine: function() {
        return $id(this.verticalDivId)
    },
    setMouseEvents: function(a, b) {
        this.hLineMouseEvt = a;
        this.vLineMouseEvt = b
    },
    updateCrossPoint: function(a) {
        this.crossPoint = a;
        this.drawCrossLines()
    },
    drawCrossLines: function() {
        var d = this.canvas;
        var c = this.canvas.id;
        var g = c + "_crossLines_H";
        var h = c + "_crossLines_V";
        var e = this.verticalRange || {
            y1: 0,
            y2:  winHeight
        };
        var a = this.horizontalRange || {
            x1: 0,
            x2: winWidth
        };
        var j = this.canvasPosition;
        if (this.crossPoint.x < a.x1 || this.crossPoint.x > a.x2 || this.crossPoint.y < e.y1 || this.crossPoint.y > e.y2) {
            this.removeCrossLines();
            return
        }
        var i = (d.style.zIndex || 1) + 1;
        var k = false;
        var f;
        if ($id(g)) {
            k = true;
            f = $id(g)
        } else {
            f = document.createElement("DIV");
            f.id = g
        }
        f.style.display = "block";
        f.style.position = "absolute";
		//十字线宽度
        f.style.width = Math.round(a.x2 - a.x1 - 2) + "px";
        f.style.height = "1px";
        f.style.left = Math.round(j.x + a.x1) + "px";
        f.style.top = Math.round(this.crossPoint.y + j.y) + "px";
        f.style.backgroundColor = this.color;
        f.style.zIndex = i;
        if (!k) {
            document.body.appendChild(f);
            if (typeof this.hLineMouseEvt == "function") {
                addEvent(f, "mouseover", this.hLineMouseEvt);
                addEvent(f, "mousemove", this.hLineMouseEvt)
            }
        }
        k = false;
        var b;
        if ($id(h)) {
            k = true;
            b = $id(h)
        } else {
            b = document.createElement("DIV");
            b.id = h
        }
        b.style.display = "block";
        b.style.position = "absolute";
        b.style.height = Math.round(e.y2 - e.y1 -2) + "px";
        b.style.width = "1px";
        b.style.left = Math.round(this.crossPoint.x + j.x) + "px";
        b.style.top = Math.round(e.y1 + j.y) + "px";
        b.style.backgroundColor = this.color;
		
        b.style.index = i;
        if (!k) {
            document.body.appendChild(b);
            if (typeof this.vLineMouseEvt == "function") {
                addEvent(b, "mouseover", this.vLineMouseEvt);
                addEvent(b, "mousemove", this.vLineMouseEvt)
            }
        }
    }
};
function xAxis(a) {
    this.options = a
}
xAxis.prototype = {
    initialize: function(a) {
        a.options = this.options
    },
    start: function() {
        var a = this.ctx;
        a.save();
        a.fillStyle = this.options.color;
        a.font = this.options.font;
        if (this.options.textBaseline) {
            a.textBaseline = this.options.textBaseline
        }
        a.translate(this.options.region.x, this.options.region.y)
    },
    getY: function() {
        return 0
    },
    getX: function(b) {
        if (b == 0) {
            return 0
        }
        var a = this.ctx.measureText(this.data[b]).width;
        if (b == this.data.length - 1) {
            return this.options.region.width - a
        }
        return (this.options.region.width * b / (this.data.length - 1)) - a / 2
    },
    paintItem: function(b, a, c) {
        this.ctx.fillText(this.data[b], a, c)
    },
    end: function() {
        this.ctx.restore()
    }
};
function Tip(a) {
    extendObject(a, this)
}
Tip.prototype = {
    getElementId: function() {
        return this.canvas.id + "_tip"
    },
    _getRightLimit: function() {
        return this.canvasRange.x + this.canvasRange.width
    },
    _getLeftLimit: function() {
        return this.canvasRange.x
    },
    _getTopLimit: function() {
        return this.canvasRange.y
    },
    _getBottomLimit: function() {
        return this.canvasRange.y + this.canvasRange.height
    },
    show: function(b, d) {
        if (b) {
            this.relativePoint = b
        }
        if (d) {
            this.innerHTML = d
        }
        var l = $id(this.getElementId());
        var m = this.size;
        var c = this.offsetToPoint;
        var e = this.position;
        var b = this.relativePoint;
        var i = getPageCoord(this.canvas);
        var h = e.y || b.y;
        var k = e.x || b.x;
        var j = 0;
        var g = 0;
        if (e.x) {
            j = e.x
        } else {}
        if (e.y) {
            g = e.y
        } else {
            if (l) {
                var a = parseInt(l.style.top) - i.y;
                if (a > h) {
                    if (c + h + m.height > this._getBottomLimit()) {
                        a = h - c - m.height
                    } else {
                        a = h + c
                    }
                } else {
                    if (h - c - m.height > this._getTopLimit()) {
                        a = h - c - m.height
                    } else {
                        a = h + c
                    }
                }
                g = a
            } else {
                g = h + c;
                if (g > this._getBottomLimit()) {
                    g = h - c - m.height
                }
            }
        }
        if (!l) {
            l = document.createElement("DIV");
            l.id = this.getElementId();
            var f = this.opacity || 100;
            l.style.cssText = 'line-height:16px;font-family:Microsoft yahei,Arial,"宋体";font-size:8pt;padding:4px 0px; text-align:left;';
            l.style.position = "absolute";
            l.style.zIndex = 4 + (this.canvas.style.zIndex || 1);
            l.style.backgroundColor = "rgba(255,255,255,1)";
            l.style.width = 92 + "px";
			l.style.paddingLeft = '8px';
			l.style.paddingRight = '8px';
            l.style.height = 160 + "px";
			l.style.border = '1px solid #000';
            if (this.cssClass) {
                l.className = this.cssClass
            }
            document.body.appendChild(l)
        }
        j = i.x + j;
        g = i.y + g;
		if(k < (winWidth/2)){
			l.style.left = (k-(120)) + "px";
		}else{
			l.style.left = (k+10) + "px";
		};
		if(k<(120 + 40)){
			l.style.left = k + 10 + "px";
		}else if(k > (winWidth - 120 - 40)){
			l.style.left = k - 120  + "px";
		}
        l.style.top = g + "px";
        l.style.display = "block";
        l.innerHTML = this.innerHTML;
    },
    hide: function() {
        var a = $id(this.getElementId());
        if (a) {
            a.style.display = "none"
        }
    },
    update: function(b, a) {
        this.relativePoint = b;
        this.innerHTML = a;
        this.show()
    }
};
function linePainter(a) {
    this.options = a
}
linePainter.prototype = {
    initialize: function(a) {
        a.options = this.options
    },
    getDataLength: function() {
        return this.options.getDataLength.call(this)
    },
    getX: function(a) {
        return (a) * (this.options.region.width / this.options.maxDotsCount)
    },
    start: function() {
        var a = this.ctx;
        var c = this.options;
        var e = c.region;
        a.save();
        a.translate(e.x, e.y + e.height / 2);
        var b = 0;
        var d = this;
        this.data.items.each(function(f) {
            var g = Math.abs(c.middleValue - c.getItemValue(f));
            b = Math.max(g, b)
        });
        this.maxDiff = b;
        a.beginPath();
        a.strokeStyle = c.lineColor
    },
    end: function() {
        this.ctx.stroke();
        this.ctx.restore()
    },
    getY: function(b) {
        var a = this.options;
        if (typeof(a.getAvgValue) == "function") {
            var c = a.getAvgValue(this.data.items[b]) - a.middleValue
        } else {
            var c = a.getItemValue(this.data.items[b]) - a.middleValue
        }
        return 0 - c * a.region.height / 2 / this.maxDiff
    },
    paintItem: function(c, a, d) {
        var b = this.ctx;
        if (c == 0) {
            b.moveTo(a, d)
        } else {
            b.lineTo(a, d)
        }
    }
};
function volumePainter(a) {
    this.options = a;
    this.barWidth = a.bar.width;
    this.spaceWidth = a.region.width / a.maxDotsCount - a.bar.width;
    if (this.spaceWidth < 0) {
        this.spaceWidth = 0
    }
    if (this.barWidth * a.maxDotsCount > a.region.width) {
        this.barWidth = a.region.width / a.maxDotsCount
    }
}
volumePainter.prototype = {
    initialize: function(a) {
        a.options = this.options;
        a.barWidth = this.barWidth;
        a.spaceWidth = this.spaceWidth
    },
    getDataLength: function() {
        return this.options.getDataLength.call(this)
    },
    getX: function(a) {
        return this.options.region.x + a * (this.barWidth + this.spaceWidth)
    },
    start: function() {
        var b = this.ctx;
        var c = this.options;
        var d = c.region;
        b.save();
        var a = 0;
        this.data.items.each(function(e) {
            a = Math.max(a, e.volume)
        });
        this.maxVolume = a;
        b.fillStyle = c.bar.color
    },
    end: function() {
        this.ctx.restore()
    },
    getY: function(a) {
        var b = this.options.region.y + (this.maxVolume - this.data.items[a].volume) * this.options.region.height / this.maxVolume;
        return b
    },
    paintItem: function(c, a, d) {
        var b = this.ctx;
        b.beginPath();
        b.rect(a, d, this.barWidth, this.options.region.y + this.options.region.height - d);
        b.fill()
    }
};
function yAxis(a) {
    this.scalerOptions = a
}
yAxis.prototype = {
    initialize: function(a) {
        a.scalerOptions = this.scalerOptions
    },
    start: function() {
        var a = this.ctx;
        a.save();
        if (typeof this.scalerOptions.color == "string") {
            a.fillStyle = this.scalerOptions.color
        }
        a.font = this.scalerOptions.font;
        a.translate(this.scalerOptions.region.x, this.scalerOptions.region.y);
        if (this.scalerOptions.textBaseline) {
            a.textBaseline = this.scalerOptions.textBaseline
        }
    },
    end: function() {
        this.ctx.restore()
    },
    getX: function(b) {
        if (this.scalerOptions.align == "left") {
            return 0
        }
        var a = this.ctx.measureText(this.data[b]).width;
        return this.scalerOptions.region.width - a
    },
    getY: function(a) {
        if (a == 0) {
            return 0
        }
        if (a == this.data.length - 1) {
            return this.scalerOptions.region.height - this.scalerOptions.fontHeight
        }
        return (this.scalerOptions.region.height * a / (this.data.length - 1) - this.scalerOptions.fontHeight / 2)
    },
    paintItem: function(b, a, c) {
        if (typeof this.scalerOptions.color == "function") {
            this.ctx.fillStyle = this.scalerOptions.color(this.data[b])
        }
        this.ctx.fillText(this.data[b], a, c)
    }
};
function calcAxisValues(f, b, d, h) {
    var g = f - b;
    var e = g / (d - 1);
    var a = [];
    if (typeof h == "undefined") {
        h = toMoney
    }
    for (var c = 0; c < d; c++) {
        a.push(toMoney(f - c * e, precision))
    }
    return a
}
function disableBubbleAndPreventDefault(a) {
    if (a.preventDefault) {
        a.preventDefault()
    }
    a.cancelBubble = true
}
function setTouchEventOffsetPosition(c, b) {
    c = c || event;
    if (c.touches && c.touches.length) {
        c = c.touches[0]
    } else {
        if (c.changedTouches && c.changedTouches.length) {
            c = c.changedTouches[0]
        }
    }
    var a, d;
    a = c.pageX - b.x;
    d = c.pageY - b.y;
    return {
        offsetX: a,
        offsetY: d
    }
}
function crossLinesAndTipMgr(b, a) {
    if (typeof Tip != "function") {
        window.Tip = function() {};
        window.Tip.prototype = {
            show: function() {},
            hide: function() {},
            update: function() {}
        }
    }
    this.canvas = b;
    this.options = a
}
crossLinesAndTipMgr.prototype._removeTipAndCrossLines = function() {
    var a = this;
    if (a.tip) {
        a.tip.hide()
    }
    if (a.clsMgr) {
        a.clsMgr.removeCrossLines()
    }
};
crossLinesAndTipMgr.prototype.updateOptions = function(a) {
    this.options = a
};
crossLinesAndTipMgr.prototype._onMouseOrTouchMove = function(h) {
    h = h || event;
    h = getOffset(h);
    var g = this;
    var m = g.options;
    var a = g.canvas;
    var i = getPageCoord(a);
    var e = m.triggerEventRanges;
    var b = winWidth;
    var c = winHeight;
    if (h.offsetX < e.x || h.offsetX > e.x + b || h.offsetY < e.y || h.offsetY > e.y + c) {
        g._removeTipAndCrossLines();
        return
    }
    var d = m.getCrossPoint(h);
    var k = {
        crossPoint: d,
        verticalRange: {
            y1: e.y,
            y2: c
        },
        horizontalRange: {
            x1: e.x,
            x2: b
        },
        color: m.crossLineOptions.color,
        canvas: a
    };
    if (!g.clsMgr) {
        var l = new crossLines(k);
        l.setMouseEvents(function(p) {
            p = p || event;
            p = getOffset(p);
            var o = {
                offsetX: p.offsetX + e.x,
                offsetY: parseInt(g.clsMgr.getHLine().style.top) - i.y
            };
            var n = m.getCrossPoint(o);
            l.updateCrossPoint(n);
            if (g.tip) {
                g.tip.update(n, m.tipOptions.getTipHtml(o))
            }
        },
        function(p) {
            p = p || event;
            p = getOffset(p);
            var o = {
                offsetX: parseInt(g.clsMgr.getVLine().style.left) - i.x,
                offsetY: p.offsetY + e.y
            };
            var n = m.getCrossPoint(o);
            l.updateCrossPoint(n);
            if (g.tip) {
                g.tip.update(n, m.tipOptions.getTipHtml(o))
            }
        });
        g.clsMgr = l
    } else {
        g.clsMgr.updateOptions(k)
    }
    g.clsMgr.drawCrossLines();
    if (m.tipOptions) {
        var f = m.tipOptions;
        if (!g.tip) {
            var j = new Tip({
                position: {
                    x: f.position.x || false,
                    y: f.position.y || false
                },
                size: f.size,
                opacity: f.opacity || 80,
                cssClass: f.cssClass,
                offsetToPoint: f.offsetToPoint || 30,
                relativePoint: {
                    x: d.x,
                    y: d.y
                },
                canvas: a,
                canvasRange: m.triggerEventRanges,
                innerHTML: f.getTipHtml(h)
            });
            g.tip = j
        }
        f.MAdata(h);
        g.tip.show(d, f.getTipHtml(h))
    }
};
crossLinesAndTipMgr.prototype._touchstart = function(a) {
    a = a || event;
    var b = a.srcElement || a.target || a.relatedTarget;
    this.touchstartTime = new Date()
};
crossLinesAndTipMgr.prototype._touchmove = function(d) {
    d = d || event;
    var b = this.canvas;
    var c = getPageCoord(b);
    var f = d.srcElement || d.target || d.relatedTarget;
    var a = setTouchEventOffsetPosition(d, c);
    this._onMouseOrTouchMove(a)
};
crossLinesAndTipMgr.prototype._touchend = function(g) {
    var i = this;
    var j = i.options;
    var f = j.tipOptions;
    f.MAdata();
    g = g || event;
    var a = g.srcElement || g.target || g.relatedTarget;
    var b = this.canvas;
    var d = setTouchEventOffsetPosition(g, getPageCoord(b));
    this._removeTipAndCrossLines();
    try {
        var c = new Date();
        var h = c.getTime() - this.touchstartTime.getTime();
        if (h < 200) {
            if (typeof this.options.onClick == "function") {
                this.options.onClick()
            }
        }
    } catch(g) {}
};
crossLinesAndTipMgr.prototype._mouseout = function(g) {
    var h = g || event;
    g = getOffset(h);
    var f = this;
    var c = f.options.triggerEventRanges;
    var b = winWidth;
    var a = winHeight;
    if (g.offsetX <= c.x || g.offsetX >= c.x + b || g.offsetY <= c.y || g.offsetY >= c.y + a) {
        f._removeTipAndCrossLines();
        return
    }
    var d = h.toElement || h.relatedTarget || h.target;
    if (d) {
        if (d == f.canvas) {
            return
        }
        if (d == f.clsMgr.getHLine() || d == f.clsMgr.getVLine()) {
            return
        }
        f._removeTipAndCrossLines()
    }
};
crossLinesAndTipMgr.prototype.addCrossLinesAndTipEvents = function() {
    var d = this.canvas;
    var c = this.options;
    var a = getPageCoord(d);
    if (d.addCrossLinesAndTipEvents == true) {
        return
    }
    d.addCrossLinesAndTipEvents = true;
    var b = isTouchDevice();
    var f = this;
    var e = f.options.controllerEvents;
    if (b) {
        addEvent(d, "touchstart",
        function(g) {
            g = g || event;
            disableBubbleAndPreventDefault(g);
            if (f.options.shouldDoControllerEvent(g, "touchstart")) {
                e.onStart(g)
            } else {
                f._touchstart.call(f, g)
            }
        });
        addEvent(d, "touchmove",
        function(g) {
            g = g || event;
            disableBubbleAndPreventDefault(g);
            if (f.options.shouldDoControllerEvent(g, "touchmove")) {
                e.onMove(g)
            } else {
                f._touchmove.call(f, g)
            }
        });
        addEvent(d, "touchend",
        function(g) {
            g = g || event;
            disableBubbleAndPreventDefault(g);
            if (f.options.shouldDoControllerEvent(g, "touchend")) {
                e.onEnd(g)
            }
            f._touchend.call(f, g)
        })
    } else {
        addEvent(d, "mouseout",
        function(g) {
            if (f.options.shouldDoControllerEvent(g)) {
                e.onEnd(g)
            } else {
                f._mouseout.call(f, g)
            }
        });
        addEvent(d, "mousemove",
        function(g) {
            if (f.options.shouldDoControllerEvent(g)) {
                e.onMove(g)
            } else {
                f._onMouseOrTouchMove.call(f, g)
            }
        });
        addEvent(d, "mousedown",
        function(g) {
            if (f.options.shouldDoControllerEvent(g)) {
                e.onStart(g)
            }
        });
        addEvent(d, "mouseup",
        function(g) {
            e.onEnd(g)
        });
        if (typeof c.onClick == "function") {
            addEvent(d, "click", c.onClick)
        }
    }
};
function addCrossLinesAndTipEvents(b, a) {
    if (!b.crossLineAndTipMgrInstance) {
        b.crossLineAndTipMgrInstance = new crossLinesAndTipMgr(b, a);
        b.crossLineAndTipMgrInstance.addCrossLinesAndTipEvents()
    }
}
function controller(b, a) {
    this.canvas = $id(b);
    this.ctx = this.canvas.getContext("2d");
    this.region = a.region;
    this.bar = a.bar;
    this.value = a.value;
    this.minBarDistance = a.minBarDistance || 5;
    this.onPositionChanged = a.onPositionChanged;
    this.prePaint = a.prePaint;
    this.isTouchDevice = isTouchDevice();
    this.touchFaultTolerance = a.touchFaultTolerance
}
controller.prototype = {
    calcPositions: function() {
        var a = (this.region.width - this.bar.width);
        this.leftBarPosition = this.value.left * a / 100 + this.bar.width / 2;
        this.rightBarPosition = this.value.right * a / 100 + this.bar.width / 2
    },
    drawControllerPart: function() {
        var c = this.canvas;
        var a = this.ctx;
        a.save();
        var h = this.region;
        var f = this.bar;
        this.calcPositions();
        var e = this.leftBarPosition;
        var b = this.rightBarPosition;
        a.clearRect(h.x - 1, h.y - 1, h.width + 1, h.height + 1);
        if (typeof this.prePaint == "function") {
            this.prePaint(a)
        }
        a.lineWidth = 1;
        a.strokeStyle = h.borderColor;
        a.beginPath();
        a.moveTo(h.x, h.y);
        a.lineTo(h.x, h.y + h.height);
        a.lineTo(h.x + e, h.y + h.height);
        a.lineTo(h.x + e, h.y + h.height - (h.height - f.height) / 2);
        a.stroke();
        a.strokeStyle = h.borderColor;
        a.beginPath();
        a.moveTo(h.x + e, h.y + h.height / 2 - f.height / 2);
        a.lineTo(h.x + e, h.y);
        a.lineTo(h.x, h.y);
        a.stroke();
        a.beginPath();
        a.moveTo(h.x + e, h.y + h.height);
        a.lineTo(h.x + h.width, h.y + h.height);
        a.lineTo(h.x + h.width, h.y);
        a.lineTo(h.x + b, h.y);
        a.lineTo(h.x + b, h.y + h.height / 2 - f.height / 2);
        a.stroke();
        a.beginPath();
        a.moveTo(h.x + b, h.y + h.height / 2 + f.height / 2);
        a.lineTo(h.x + b, h.y + h.height);
        a.stroke();
        a.beginPath();
        a.fillStyle = "blue";
        a.globalAlpha = 0.5;
        a.rect(h.x + e, h.y, b - e, h.height);
        a.closePath();
        a.fill();
        a.globalAlpha = 1;
        a.strokeStyle = f.borderColor;
        a.fillStyle = f.fillColor;
        a.beginPath();
        var g = {
            x: h.x + e - f.width / 2,
            y: h.y + h.height / 2 - f.height / 2,
            width: f.width,
            height: f.height
        };
        a.rect(g.x, g.y, g.width, g.height);
        this.leftBarRegion = g;
        a.closePath();
        a.stroke();
        a.fill();
        a.beginPath();
        var d = {
            x: h.x + b - f.width / 2,
            y: h.y + h.height / 2 - f.height / 2,
            width: f.width,
            height: f.height
        };
        a.rect(d.x, d.y, d.width, d.height);
        this.rightBarRegion = d;
        a.closePath();
        a.stroke();
        a.fill();
        a.restore()
    },
    setLeftBarPosition: function(a) {
        if (a < this.bar.width / 2) {
            this.leftBarPosition = this.bar.width / 2
        } else {
            if (this.rightBarPosition - a - this.minBarDistance > this.bar.width) {
                this.leftBarPosition = a
            } else {
                this.leftBarPosition = this.rightBarPosition - this.bar.width - this.minBarDistance
            }
        }
        this.value = this.getValue()
    },
    setRightBarPosition: function(a) {
        if (a < this.leftBarPosition + this.bar.width + this.minBarDistance) {
            this.rightBarPosition = this.leftBarPosition + this.bar.width + this.minBarDistance
        } else {
            if (a > this.region.width - this.bar.width / 2) {
                this.rightBarPosition = this.region.width - this.bar.width / 2
            } else {
                this.rightBarPosition = a
            }
        }
        this.value = this.getValue()
    },
    addControllerEvents: function() {
        var c = this;
        if (c.isTouchDevice) {
            var a = c.canvas;
            addEvent(a, "touchmove",
            function(o) {
                o = o || event;
                var f = o.srcElement || o.target || o.relatedTarget;
                var n = o.touches;
                if (!n || !n.length) {
                    return
                }
                var l = false;
                var p = getPageCoord(this.canvas);
                if (c.fingers && c.fingers.length) {
                    for (var m = 0; m < c.fingers.length; m++) {
                        var q = c.fingers[m];
                        for (var h = 0; h < n.length; h++) {
                            var k = n[h];
                            if (k.identifier == q.id) {
                                var g = k.pageX - p.x;
                                var r = (g - q.startX);
                                if (r != 0) {
                                    if (q.type == "left") {
                                        c.setLeftBarPosition(q.leftPosition + r)
                                    } else {
                                        if (q.type == "right") {
                                            c.setRightBarPosition(q.rightPosition + r)
                                        } else {
                                            c.setLeftBarPosition(q.leftPosition + r);
                                            c.setRightBarPosition(q.rightPosition + r)
                                        }
                                    }
                                    l = true
                                }
                                break
                            }
                        }
                    }
                }
                if (l) {
                    c.drawControllerPart();
                    if (typeof c.onPositionChanged == "function" && c.isValueChanged()) {
                        c.value = c.getValue();
                        c.onPositionChanged(c.value)
                    }
                }
                disableBubbleAndPreventDefault(o)
            });
            addEvent(a, "touchend",
            function(l) {
                l = l || event;
                if (c.fingers && c.fingers.length) {
                    if (typeof c.onPositionChanged == "function" && c.isValueChanged()) {
                        c.value = c.getValue();
                        c.onPositionChanged(c.value)
                    }
                } else {
                    var j = new Date().getTime() - c.touchstartTime.getTime();
                    if (j < window.tapTimeLimit && c.startTouch) {
                        var h = getPageCoord(c.canvas);
                        var g = c.startTouch;
                        var f = {
                            offsetX: g.pageX - h.x,
                            offsetY: g.pageY - h.y
                        };
                        var k = (c.rightBarPosition + c.leftBarPosition) / 2;
                        var i = f.offsetX - k;
                        c.setLeftBarPosition(c.leftBarPosition + i);
                        c.setRightBarPosition(c.rightBarPosition + i);
                        c.drawControllerPart();
                        if (typeof c.onPositionChanged == "function" && c.isValueChanged()) {
                            c.value = c.getValue();
                            c.onPositionChanged(c.value)
                        }
                        c.startTouch = null
                    }
                }
                c.fingers = null;
                disableBubbleAndPreventDefault(l)
            });
            addEvent(a, "touchstart",
            function(l) {
                var j = l.touches;
                if (!j || !j.length) {
                    j = l.changedTouches
                }
                c.touchstartTime = new Date();
                c.startTouch = j[0];
                var f = l.srcElement || l.target || l.relatedTarget;
                var n = getPageCoord(c.canvas);
                function m(i) {
                    if (c.isOnLeftBar(i)) {
                        return "left"
                    }
                    if (c.isOnRightBar(i)) {
                        return "right"
                    }
                    if (c._isBetweenLeftAndRight(i)) {
                        return "middle"
                    }
                    return false
                }
                c.fingers = [];
                if (j.length) {
                    for (var h = 0; h < j.length; h++) {
                        var g = j[h];
                        var p = {
                            offsetX: g.pageX - n.x,
                            offsetY: g.pageY - n.y
                        };
                        var k = m(p);
                        if (!k) {
                            continue
                        }
                        var o = {
                            id: g.identifier,
                            startX: g.pageX - n.x,
                            type: k,
                            leftPosition: c.leftBarPosition,
                            rightPosition: c.rightBarPosition
                        };
                        c.fingers.push(o)
                    }
                }
                disableBubbleAndPreventDefault(l);
                return false
            })
        } else {
            var e = function(i) {
                var g = c.isOnLeftBar(i);
                var f = c.isOnRightBar(i);
                if (c._isBetweenLeftAndRight(i)) {
                    document.body.style.cursor = "pointer"
                } else {
                    if (g || f || c.triggerBar) {
                        document.body.style.cursor = "col-resize"
                    } else {
                        document.body.style.cursor = "default"
                    }
                }
                if (c.triggerBar) {
                    c.triggerBar.targetX = i.offsetX;
                    var h = (c.triggerBar.targetX - c.triggerBar.x);
                    if (c.triggerBar.type == "left") {
                        document.body.style.cursor = "col-resize";
                        c.setLeftBarPosition(c.triggerBar.position + h)
                    } else {
                        if (c.triggerBar.type == "right") {
                            c.setRightBarPosition(c.triggerBar.position + h)
                        } else {
                            c.setLeftBarPosition(c.triggerBar.leftPosition + h);
                            c.setRightBarPosition(c.triggerBar.rightPosition + h)
                        }
                    }
                    if (typeof c.onPositionChanged == "function" && c.isValueChanged()) {
                        c.value = c.getValue();
                        c.onPositionChanged(c.value)
                    }
                    c.drawControllerPart()
                }
            };
            var b = function(f) {
                if (c.triggerBar) {}
                c.triggerBar = null;
                document.body.style.cursor = "default";
                if (typeof c.onPositionChanged == "function" && c.isValueChanged()) {
                    c.value = c.getValue();
                    c.onPositionChanged(c.value)
                }
            };
            var d = function(i) {
                var h = c.isOnLeftBar(i);
                var g = c.isOnRightBar(i);
                var f = c._isBetweenLeftAndRight(i);
                if (f) {
                    document.body.style.cursor = "pointer"
                } else {
                    if (h || g) {
                        document.body.style.cursor = "col-resize"
                    } else {
                        document.body.style.cursor = "default"
                    }
                }
                if (h) {
                    c.triggerBar = {
                        type: "left",
                        x: i.offsetX,
                        position: c.leftBarPosition
                    }
                } else {
                    if (g) {
                        c.triggerBar = {
                            type: "right",
                            x: i.offsetX,
                            position: c.rightBarPosition
                        }
                    } else {
                        if (f) {
                            c.triggerBar = {
                                type: "middle",
                                x: i.offsetX,
                                leftPosition: c.leftBarPosition,
                                rightPosition: c.rightBarPosition
                            }
                        } else {
                            c.triggerBar = null
                        }
                    }
                }
            };
            addEvent(c.canvas, "mouseup", b);
            addEvent(c.canvas, "mouseout", b);
            addEvent(c.canvas, "mousemove",
            function(g) {
                g = g || event;
                if (g.preventDefault) {
                    g.preventDefault()
                } else {
                    g.returnValue = false
                }
                var f = getOffset(g);
                e(f)
            });
            addEvent(c.canvas, "mousedown",
            function(g) {
                g = g || event;
                var f = getOffset(g);
                d(f)
            })
        }
    },
    isValueChanged: function() {
        if (typeof this.preValue == "undefined") {
            this.preValue = this.getValue();
            return false
        }
        if (isTouchDevice() && this.latestChangeTime) {
            var b = new Date();
            if (b.getTime() - this.latestChangeTime.getTime() < 50) {
                return false
            }
        }
        var d = this.preValue;
        var c = this.getValue();
        var e = Math.abs(c.left - d.left) + Math.abs(c.right - d.right);
        this.preValue = c;
        var a = e != 0;
        if (a) {
            this.latestChangeTime = new Date()
        }
        return e != 0
    },
    _isInRegion: function(a, b) {
        return a.offsetX > b.x && a.offsetX < b.x + b.width && a.offsetY > b.y && a.offsetY < b.y + b.height
    },
    _isBetweenLeftAndRight: function(b) {
        var c = this.region;
        var a = {
            x: c.x + this.leftBarPosition + this.bar.width / 2,
            y: c.y,
            width: this.rightBarPosition - this.leftBarPosition - this.bar.width,
            height: this.region.height
        };
        return this._isInRegion(b, a)
    },
    _getTouchFaultToleranceRegion: function(b) {
        var a = this;
        if (a.isTouchDevice) {
            b.x -= a.touchFaultTolerance / 2;
            b.width += a.touchFaultTolerance / 2
        }
        return b
    },
    isOnLeftBar: function(a) {
        var b = this._getTouchFaultToleranceRegion(this.leftBarRegion);
        return this._isInRegion(a, b)
    },
    isOnRightBar: function(a) {
        var b = this._getTouchFaultToleranceRegion(this.rightBarRegion);
        return this._isInRegion(a, b)
    },
    getValue: function() {
        var a = this.region.width - this.bar.width;
        return {
            left: (this.leftBarPosition - this.bar.width / 2) * 100 / a,
            right: (this.rightBarPosition - this.bar.width / 2) * 100 / a
        }
    }
};